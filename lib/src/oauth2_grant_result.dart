import 'package:anthochamp_dart_essentials/dart_essentials.dart';
import 'package:oauth2_client/src/oauth2_exceptions.dart';
import 'package:oauth2_client/src/oauth2_typedefs.dart';

class OAuth2AuthorizationCodeGrantResult {
  /// The authorization code generated by the authorization server.
  final OAuth2AuthorizationCode code;

  /// Additional customParameters
  final OAuth2Parameters customParameters;

  const OAuth2AuthorizationCodeGrantResult({
    required this.code,
    this.customParameters = const {},
  });

  factory OAuth2AuthorizationCodeGrantResult.fromJson(JsonObject json) {
    OAuth2Parameters customParameters = {}..addAll(json);

    final String? code = customParameters.remove('code');
    if (code == null) {
      throw OAuth2InvalidDataException('Missing "code" field', json);
    }

    return OAuth2AuthorizationCodeGrantResult(
      code: code,
      customParameters: customParameters,
    );
  }

  JsonObject toJson() => {
        ...customParameters,
        'code': code,
      };
}

// https://www.rfc-editor.org/rfc/rfc6749#section-4.2.2
class OAuth2ImplicitGrantResult {
  /// The access token issued by the authorization server.
  final String accessToken;

  /// The type of the token issued as described in Section 7.1.
  // https://www.rfc-editor.org/rfc/rfc6749#section-7.1
  final String tokenType;

  /// The lifetime in seconds of the access token.  For
  /// example, the value "3600" denotes that the access token will
  /// expire in one hour from the time the response was generated.
  final Duration? expiresIn;

  /// The scopes of the access token as described by Section 3.3.
  final Iterable<OAuth2Scope>? scopes;

  /// Additional customParameters
  final OAuth2Parameters customParameters;

  const OAuth2ImplicitGrantResult({
    required this.accessToken,
    required this.tokenType,
    this.expiresIn,
    this.scopes,
    this.customParameters = const {},
  });

  factory OAuth2ImplicitGrantResult.fromJson(JsonObject json,
      {required String scopesGlue}) {
    final tokenGrantResult =
        OAuth2TokenGrantResult.fromJson(json, scopesGlue: scopesGlue);

    return OAuth2ImplicitGrantResult(
      accessToken: tokenGrantResult.accessToken,
      tokenType: tokenGrantResult.tokenType,
      expiresIn: tokenGrantResult.expiresIn,
      scopes: tokenGrantResult.scopes,
    );
  }

  JsonObject toJson({required String scopesGlue}) => OAuth2TokenGrantResult(
        accessToken: accessToken,
        tokenType: tokenType,
        expiresIn: expiresIn,
        scopes: scopes,
        customParameters: customParameters,
      ).toJson(scopesGlue: scopesGlue);
}

// https://www.rfc-editor.org/rfc/rfc6749#section-5.1
class OAuth2TokenGrantResult {
  /// The access token issued by the authorization server.
  final String accessToken;

  /// The type of the token issued as described in Section 7.1.
  // https://www.rfc-editor.org/rfc/rfc6749#section-7.1
  final String tokenType;

  /// The lifetime in seconds of the access token.  For
  /// example, the value "3600" denotes that the access token will
  /// expire in one hour from the time the response was generated.
  final Duration? expiresIn;

  /// The refresh token, which can be used to obtain new
  /// access tokens using the same authorization grant as described
  /// in Section 6
  final String? refreshToken;

  /// The scopes of the access token as described by Section 3.3.
  final Iterable<OAuth2Scope>? scopes;

  /// Additional customParameters
  final OAuth2Parameters customParameters;

  const OAuth2TokenGrantResult({
    required this.accessToken,
    required this.tokenType,
    this.expiresIn,
    this.refreshToken,
    this.scopes,
    this.customParameters = const {},
  });

  factory OAuth2TokenGrantResult.fromJson(
    JsonObject json, {
    required String scopesGlue,
  }) {
    OAuth2Parameters customParameters = {}..addAll(json);

    final String? accessToken = customParameters.remove('access_token');
    final String? tokenType = customParameters.remove('token_type');
    if (accessToken == null || tokenType == null) {
      throw OAuth2InvalidDataException(
          'Missing one or both "access_token" "token_type" fields', json);
    }

    final String? refreshToken = customParameters.remove('refresh_token');
    final dynamic expiresInValue = customParameters.remove('expires_in');
    final Duration? expiresIn = expiresInValue == null
        ? null
        : Duration(
            seconds: expiresInValue is String
                ? int.parse(expiresInValue)
                : expiresInValue,
          );
    final Iterable<OAuth2Scope>? scopes =
        customParameters.remove('scope')?.split(scopesGlue);

    return OAuth2TokenGrantResult(
      accessToken: accessToken,
      tokenType: tokenType,
      refreshToken: refreshToken,
      expiresIn: expiresIn,
      scopes: scopes,
      customParameters: customParameters,
    );
  }

  JsonObject toJson({required String scopesGlue}) => <String, dynamic>{
        ...customParameters,
        'access_token': accessToken,
        'token_type': tokenType,
        'refresh_token': refreshToken,
        'expires_in': expiresIn?.inSeconds,
        'scope': scopes == null ? null : scopes!.join(scopesGlue),
      };
}
